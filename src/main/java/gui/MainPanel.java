package gui;

import com.mxgraph.layout.mxOrganicLayout;
import com.mxgraph.swing.mxGraphComponent;
import com.mxgraph.view.mxGraph;
import models.Conexion;
import models.Equipo;
import models.TipoCable;

import java.awt.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MainPanel extends javax.swing.JPanel {
    private mxGraph mxGraph;
    Map<Equipo, Object> vertexMap;
    private static final String VERTEX_STYLE = "fontColor=white;strokeColor=black;fillColor=";
    private static final String EDGE_STYLE = "endArrow=none;strokeColor=";

    /**
     * Creates new form MainJPanel
     */
    public MainPanel() {
        initComponents();
        initMxGraphStyle();
    }

    private void initMxGraphStyle() {
        mxGraph = new mxGraph() {
            @Override
            public boolean isCellConnectable(Object cell) {
                return false; // Deshabilitar la creación de nuevas aristas
            }

            @Override
            public boolean isCellMovable(Object cell) {
                return !getModel().isEdge(cell); // Permitir mover solo los vértices
            }
        };
        vertexMap = new HashMap<>();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuJP = new javax.swing.JPanel();
        upperMenu = new javax.swing.JPanel();
        titleLB = new javax.swing.JLabel();
        euiposOptionsPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        buttonsJP = new javax.swing.JPanel();
        agregarEquipoBT = new javax.swing.JButton();
        modificarEquipoBT = new javax.swing.JButton();
        eliminarEquipoBT = new javax.swing.JButton();
        conexionesOptionsPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        buttonsJP1 = new javax.swing.JPanel();
        agregarConexionBT = new javax.swing.JButton();
        modificarConexionBT = new javax.swing.JButton();
        eliminarConexionBT = new javax.swing.JButton();
        lowerMenu = new javax.swing.JPanel();
        tracerouteBT = new javax.swing.JButton();
        pingBT = new javax.swing.JButton();
        statusMapBT = new javax.swing.JButton();
        problemasBT = new javax.swing.JButton();
        graphJP = new javax.swing.JPanel();

        setPreferredSize(new java.awt.Dimension(800, 600));

        menuJP.setMinimumSize(new java.awt.Dimension(0, 400));
        menuJP.setPreferredSize(new java.awt.Dimension(300, 600));
        menuJP.setLayout(new java.awt.GridLayout(2, 1, 0, 10));

        upperMenu.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 5, 5, 5));
        upperMenu.setLayout(new java.awt.GridLayout(3, 1));

        titleLB.setFont(new java.awt.Font("Unispace", 1, 18)); // NOI18N
        titleLB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLB.setText("Red Lan Computadoras");
        upperMenu.add(titleLB);

        euiposOptionsPanel.setLayout(new java.awt.GridLayout(2, 1, 3, 0));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Equipos");
        euiposOptionsPanel.add(jLabel1);

        buttonsJP.setLayout(new java.awt.GridLayout(1, 3, 3, 0));

        agregarEquipoBT.setText("Agregar");
        agregarEquipoBT.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        agregarEquipoBT.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        agregarEquipoBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarEquipoBTActionPerformed(evt);
            }
        });
        buttonsJP.add(agregarEquipoBT);

        modificarEquipoBT.setText("Modificar ");
        modificarEquipoBT.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        modificarEquipoBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarEquipoBTActionPerformed(evt);
            }
        });
        buttonsJP.add(modificarEquipoBT);

        eliminarEquipoBT.setText("Eliminar ");
        eliminarEquipoBT.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        eliminarEquipoBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarEquipoBTActionPerformed(evt);
            }
        });
        buttonsJP.add(eliminarEquipoBT);

        euiposOptionsPanel.add(buttonsJP);

        upperMenu.add(euiposOptionsPanel);

        conexionesOptionsPanel.setLayout(new java.awt.GridLayout(2, 1, 3, 0));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Conexiones");
        conexionesOptionsPanel.add(jLabel2);

        buttonsJP1.setLayout(new java.awt.GridLayout(1, 3, 3, 0));

        agregarConexionBT.setText("Agregar");
        agregarConexionBT.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        agregarConexionBT.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        agregarConexionBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarConexionBTActionPerformed(evt);
            }
        });
        buttonsJP1.add(agregarConexionBT);

        modificarConexionBT.setText("Modificar ");
        modificarConexionBT.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        modificarConexionBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarConexionBTActionPerformed(evt);
            }
        });
        buttonsJP1.add(modificarConexionBT);

        eliminarConexionBT.setText("Eliminar ");
        eliminarConexionBT.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        eliminarConexionBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarConexionBTActionPerformed(evt);
            }
        });
        buttonsJP1.add(eliminarConexionBT);

        conexionesOptionsPanel.add(buttonsJP1);

        upperMenu.add(conexionesOptionsPanel);

        menuJP.add(upperMenu);

        lowerMenu.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 5, 5, 5));
        lowerMenu.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        tracerouteBT.setText("Ruta entre Equipos");
        tracerouteBT.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tracerouteBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tracerouteBTActionPerformed(evt);
            }
        });
        lowerMenu.add(tracerouteBT);

        pingBT.setText("Ping Equipo");
        pingBT.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        pingBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pingBTActionPerformed(evt);
            }
        });
        lowerMenu.add(pingBT);

        statusMapBT.setText("Mapa de estado equipos");
        statusMapBT.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        statusMapBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusMapBTActionPerformed(evt);
            }
        });
        lowerMenu.add(statusMapBT);

        problemasBT.setText("Problemas Conectividad");
        problemasBT.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        problemasBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                problemasBTActionPerformed(evt);
            }
        });
        lowerMenu.add(problemasBT);

        menuJP.add(lowerMenu);

        graphJP.setPreferredSize(new java.awt.Dimension(500, 600));
        graphJP.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(graphJP, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(menuJP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(menuJP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(graphJP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void agregarEquipoBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarEquipoBTActionPerformed
        // TODO add your handling code here:
        //DEBUG
        Equipo equipo = vertexMap.keySet().iterator().next();
        equipo.setCodigo("Equipo Test");
        System.out.println(equipo.getCodigo());
        addVisualVertex(equipo);
    }//GEN-LAST:event_agregarEquipoBTActionPerformed

    private void modificarEquipoBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarEquipoBTActionPerformed
        // TODO add your handling code here:
        //DEBUG
        Equipo modificado = null;
        for (Equipo equipo : vertexMap.keySet()) {
            if (equipo.getCodigo().equals("SW04")) {
                modificado = equipo;
                break;
            }
        }
        modificado.setEstado(!modificado.isEstado());
        modifyVisualVertex(modificado);
    }//GEN-LAST:event_modificarEquipoBTActionPerformed

    private void eliminarEquipoBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarEquipoBTActionPerformed
        // TODO add your handling code here:
        Equipo modificado = null;
        for (Equipo equipo : vertexMap.keySet()) {
            if (equipo.getCodigo().equals("SW04")) {
                modificado = equipo;
                break;
            }
        }
        removeVisualVertex(modificado);
    }//GEN-LAST:event_eliminarEquipoBTActionPerformed

    private void agregarConexionBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarConexionBTActionPerformed
        // TODO add your handling code here:
        //DEBUG
        Equipo e1 = null;
        Equipo e2 = null;
        for (Equipo equipo : vertexMap.keySet()) {
            if (equipo.getCodigo().equals("SWAP")) {
                e1 = equipo;
            }
            if (equipo.getCodigo().equals("AP03")) {
                e2 = equipo;
            }
        }
        Conexion conexion = new Conexion(new TipoCable("T", "Cable Test", 10), e1, e1.getPuertos().getFirst().getTipoPuerto(), e2, e2.getPuertos().getFirst().getTipoPuerto());
        addVisualEdge(conexion);
    }//GEN-LAST:event_agregarConexionBTActionPerformed

    private void modificarConexionBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarConexionBTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_modificarConexionBTActionPerformed

    private void eliminarConexionBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarConexionBTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_eliminarConexionBTActionPerformed

    private void tracerouteBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tracerouteBTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tracerouteBTActionPerformed

    private void pingBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pingBTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pingBTActionPerformed

    private void statusMapBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusMapBTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_statusMapBTActionPerformed

    private void problemasBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_problemasBTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_problemasBTActionPerformed

    protected void visualizeGraph(List<Equipo> equipos, List<Conexion> conexiones) {

        Object parent = mxGraph.getDefaultParent();

        mxGraph.getModel().beginUpdate();
        try {
            for (Equipo equipo : equipos) {
                insertColoredVertex(equipo);
            }
            for (Conexion conexion : conexiones) {
                insertColoredEdge(conexion.getEquipo1(), conexion.getEquipo2(), conexion);
            }
        } finally {
            mxGraph.getModel().endUpdate();
        }

        mxOrganicLayout layout = new mxOrganicLayout(mxGraph);
        layout.execute(mxGraph.getDefaultParent());

        mxGraphComponent graphComponent = new mxGraphComponent(mxGraph);
        graphComponent.setConnectable(false); // Deshabilitar la conexión de nuevos arcos
        graphComponent.zoomAndCenter(); // Centrar y ajustar el zoom del grafo

        graphJP.removeAll();
        graphJP.add(graphComponent, BorderLayout.CENTER);
        graphJP.revalidate();
        graphJP.repaint();
    }

    public void addVisualVertex(Equipo equipo) {
        Object parent = mxGraph.getDefaultParent();
        mxGraph.getModel().beginUpdate();
        try {
            insertColoredVertex(equipo);
        } finally {
            mxGraph.getModel().endUpdate();
            graphJP.repaint();
        }
    }

    public void removeVisualVertex(Equipo equipo) {
        Object parent = mxGraph.getDefaultParent();
        mxGraph.getModel().beginUpdate();
        try {
            Object v = vertexMap.get(equipo);
            // Remove all edges connected to the vertex
            Object[] edges = mxGraph.getEdges(v);
            for (Object edge : edges) {
                mxGraph.getModel().remove(edge);
            }
            // Remove the vertex
            mxGraph.getModel().remove(v);
            vertexMap.remove(equipo);
        } finally {
            mxGraph.getModel().endUpdate();
            graphJP.repaint();
        }
    }

    public void modifyVisualVertex(Equipo equipo) {
        Object parent = mxGraph.getDefaultParent();
        mxGraph.getModel().beginUpdate();
        try {
            Object v = vertexMap.get(equipo);
            if (equipo.isEstado()) {
                mxGraph.getModel().setStyle(v, VERTEX_STYLE + "green");
            } else {
                mxGraph.getModel().setStyle(v, VERTEX_STYLE + "red");
            }

            Object[] edges = mxGraph.getEdges(v);
            for (Object edge : edges) {
                if (equipo.isEstado()) {
                    mxGraph.getModel().setStyle(edge, EDGE_STYLE + "green");
                } else {
                    mxGraph.getModel().setStyle(edge, EDGE_STYLE + "red");
                }
            }

            mxGraph.getModel().setValue(v, equipo.getCodigo());
        } finally {
            mxGraph.getModel().endUpdate();
            graphJP.repaint();
        }
    }

    public void addVisualEdge(Conexion conexion) {
        Object parent = mxGraph.getDefaultParent();
        mxGraph.getModel().beginUpdate();
        try {
            insertColoredEdge(conexion.getEquipo1(), conexion.getEquipo2(), conexion);
        } finally {
            mxGraph.getModel().endUpdate();
            graphJP.repaint();
        }
    }

    private void insertColoredVertex(Equipo equipo) {
        Object parent = mxGraph.getDefaultParent();
        String fillColor;
        if (equipo.isEstado()) {
            fillColor = "green";
        } else {
            fillColor = "red";
        }
        Object v = mxGraph.insertVertex(parent, null, equipo.getCodigo(), 0, 0, 40, 30, VERTEX_STYLE + fillColor);
        vertexMap.put(equipo, v);
    }

    public void removeVisualEdge(Conexion conexion) {
        Object parent = mxGraph.getDefaultParent();
        mxGraph.getModel().beginUpdate();
        try {
            Equipo source = conexion.getEquipo1();
            Equipo target = conexion.getEquipo2();
            Object edge = mxGraph.getEdgesBetween(vertexMap.get(source), vertexMap.get(target))[0];
            mxGraph.getModel().remove(edge);
        } finally {
            mxGraph.getModel().endUpdate();
            graphJP.repaint();
        }
    }

    public void modifyVisualEdge(Conexion conexion) {
        Object parent = mxGraph.getDefaultParent();
        mxGraph.getModel().beginUpdate();
        try {
            Equipo source = conexion.getEquipo1();
            Equipo target = conexion.getEquipo2();
            Object edge = mxGraph.getEdgesBetween(vertexMap.get(source), vertexMap.get(target))[0];
            mxGraph.getModel().setValue(edge, conexion.getTipoCable().getVelocidad());
        } finally {
            mxGraph.getModel().endUpdate();
            graphJP.repaint();
        }
    }

    private void insertColoredEdge(Equipo source, Equipo target, Conexion conexion) {
        Object parent = mxGraph.getDefaultParent();

        String strokeColor;
        if (source.isEstado() && target.isEstado()) {
            strokeColor = "green";
        } else {
            strokeColor = "red";
        }

        mxGraph.insertEdge(parent, null, conexion.getTipoCable().getVelocidad(), vertexMap.get(source), vertexMap.get(target), EDGE_STYLE + strokeColor);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregarConexionBT;
    private javax.swing.JButton agregarEquipoBT;
    private javax.swing.JPanel buttonsJP;
    private javax.swing.JPanel buttonsJP1;
    private javax.swing.JPanel conexionesOptionsPanel;
    private javax.swing.JButton eliminarConexionBT;
    private javax.swing.JButton eliminarEquipoBT;
    private javax.swing.JPanel euiposOptionsPanel;
    private javax.swing.JPanel graphJP;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel lowerMenu;
    private javax.swing.JPanel menuJP;
    private javax.swing.JButton modificarConexionBT;
    private javax.swing.JButton modificarEquipoBT;
    private javax.swing.JButton pingBT;
    private javax.swing.JButton problemasBT;
    private javax.swing.JButton statusMapBT;
    private javax.swing.JLabel titleLB;
    private javax.swing.JButton tracerouteBT;
    private javax.swing.JPanel upperMenu;
    // End of variables declaration//GEN-END:variables
}
